// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TraveLog.Data;

#nullable disable

namespace TraveLog.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240715145348_More seeding data added")]
    partial class Moreseedingdataadded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserCountry", b =>
                {
                    b.Property<string>("CountryVisitorsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VisitedCountriesId")
                        .HasColumnType("int");

                    b.HasKey("CountryVisitorsId", "VisitedCountriesId");

                    b.HasIndex("VisitedCountriesId");

                    b.ToTable("ApplicationUserCountry");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TraveLog.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TraveLog.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 3,
                            Name = "India"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Australia"
                        });
                });

            modelBuilder.Entity("TraveLog.Models.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Description = "The Great Pyramids of Giza, a wonder of ancient world.",
                            ImageUrl = "Pyramids.jpg",
                            Name = "Pyramids"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Description = "A large temple complex in Luxor, dedicated to Amun-Ra.",
                            ImageUrl = "Karnak Temple.jpg",
                            Name = "Karnak Temple"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Description = "The mortuary temple of Hatshepsut, located in Deir el-Bahari.",
                            ImageUrl = "Hatshepsut Temple.jpg",
                            Name = "Hatshepsut Temple"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Description = "A valley in Luxor where tombs were constructed for the Pharaohs.",
                            ImageUrl = "Valley of the Kings.jpg",
                            Name = "Valley of the Kings"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Description = "Massive rock temples at Abu Simbel, built by Ramses II.",
                            ImageUrl = "Abu Simbel Temples.jpg",
                            Name = "Abu Simbel Temples"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 2,
                            Description = "A maritime museum in Stockholm, home to the 17th-century ship Vasa.",
                            ImageUrl = "Vasa Museum.jpg",
                            Name = "Vasa Museum"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 2,
                            Description = "A medieval castle in Kalmar, with a history dating back to 12th century.",
                            ImageUrl = "Kalmar Castle.jpg",
                            Name = "Kalmar Castle"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 2,
                            Description = "The old town of Stockholm, known for its cobblestone streets and colorful buildings.",
                            ImageUrl = "Gamla Stan.jpg",
                            Name = "Gamla Stan"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 2,
                            Description = "A royal palace in Stockholm, the private residence of the Swedish royal family.",
                            ImageUrl = "Drottningholm Palace.jpg",
                            Name = "Drottningholm Palace"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 3,
                            Description = "A palace in Jaipur, known for its artistic Hindu-style elements.",
                            ImageUrl = "Amber Palace.jpg",
                            Name = "Amber Palace"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 3,
                            Description = "A mausoleum in Agra, built by Emperor Shah Jahan.",
                            ImageUrl = "Taj Mahal.jpg",
                            Name = "Taj Mahal"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 3,
                            Description = "A minaret and victory tower in Delhi, one of the tallest in India.",
                            ImageUrl = "Qutub Minar.jpg",
                            Name = "Qutub Minar"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 3,
                            Description = "A historical palace in the city of Mysore, known for its architectural grandeur.",
                            ImageUrl = "Mysore Palace.jpg",
                            Name = "Mysore Palace"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 4,
                            Description = "An iconic volcano and the highest peak in Japan, a popular climbing spot.",
                            ImageUrl = "Mount Fuji.jpg",
                            Name = "Mount Fuji"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 4,
                            Description = "The Golden Pavilion, a Zen Buddhist temple in Kyoto.",
                            ImageUrl = "Kinkakuji.jpg",
                            Name = "Kinkaku-ji"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 4,
                            Description = "A communications and observation tower in Tokyo, inspired by the Eiffel Tower.",
                            ImageUrl = "Tokyo Tower.jpg",
                            Name = "Tokyo Tower"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 5,
                            Description = "An iconic statue of Jesus Christ in Rio de Janeiro.",
                            ImageUrl = "Christ the Redeemer.jpg",
                            Name = "Christ the Redeemer"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 5,
                            Description = "A massive waterfall system on the border of Brazil and Argentina.",
                            ImageUrl = "Iguazu Falls.jpg",
                            Name = "Iguazu Falls"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 5,
                            Description = "A peak situated in Rio de Janeiro, offering panoramic views.",
                            ImageUrl = "Sugarloaf Mountain.jpg",
                            Name = "Sugarloaf Mountain"
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 6,
                            Description = "An iconic performing arts center in Sydney, known for its unique design.",
                            ImageUrl = "Sydney Opera House.jpg",
                            Name = "Sydney Opera House"
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 6,
                            Description = "The world's largest coral reef system, located in the Coral Sea.",
                            ImageUrl = "Great Barrier Reef.jpg",
                            Name = "Great Barrier Reef"
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 6,
                            Description = "A massive sandstone monolith in the heart of the Northern Territory.",
                            ImageUrl = "Uluru.jpg",
                            Name = "Uluru"
                        });
                });

            modelBuilder.Entity("ApplicationUserCountry", b =>
                {
                    b.HasOne("TraveLog.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CountryVisitorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TraveLog.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("VisitedCountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TraveLog.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TraveLog.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TraveLog.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TraveLog.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TraveLog.Models.Destination", b =>
                {
                    b.HasOne("TraveLog.Models.Country", "Country")
                        .WithMany("Destinations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TraveLog.Models.Country", b =>
                {
                    b.Navigation("Destinations");
                });
#pragma warning restore 612, 618
        }
    }
}
